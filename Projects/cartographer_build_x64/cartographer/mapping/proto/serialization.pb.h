// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/sparse_pose_graph.pb.h"
#include "cartographer/mapping/proto/submap.pb.h"
#include "cartographer/sensor/proto/sensor.pb.h"
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class RangeData;
class RangeDataDefaultTypeInternal;
extern RangeDataDefaultTypeInternal _RangeData_default_instance_;
class SerializedData;
class SerializedDataDefaultTypeInternal;
extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
class Submap;
class SubmapDefaultTypeInternal;
extern SubmapDefaultTypeInternal _Submap_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

namespace cartographer {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto

// ===================================================================

class Submap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Submap) */ {
 public:
  Submap();
  virtual ~Submap();

  Submap(const Submap& from);

  inline Submap& operator=(const Submap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Submap& default_instance();

  static inline const Submap* internal_default_instance() {
    return reinterpret_cast<const Submap*>(
               &_Submap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Submap* other);

  // implements Message ----------------------------------------------

  inline Submap* New() const PROTOBUF_FINAL { return New(NULL); }

  Submap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Submap& from);
  void MergeFrom(const Submap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Submap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
  bool has_submap_id() const;
  void clear_submap_id();
  static const int kSubmapIdFieldNumber = 1;
  const ::cartographer::mapping::proto::SubmapId& submap_id() const;
  ::cartographer::mapping::proto::SubmapId* mutable_submap_id();
  ::cartographer::mapping::proto::SubmapId* release_submap_id();
  void set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id);

  // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
  bool has_submap_2d() const;
  void clear_submap_2d();
  static const int kSubmap2DFieldNumber = 2;
  const ::cartographer::mapping::proto::Submap2D& submap_2d() const;
  ::cartographer::mapping::proto::Submap2D* mutable_submap_2d();
  ::cartographer::mapping::proto::Submap2D* release_submap_2d();
  void set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d);

  // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
  bool has_submap_3d() const;
  void clear_submap_3d();
  static const int kSubmap3DFieldNumber = 3;
  const ::cartographer::mapping::proto::Submap3D& submap_3d() const;
  ::cartographer::mapping::proto::Submap3D* mutable_submap_3d();
  ::cartographer::mapping::proto::Submap3D* release_submap_3d();
  void set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap)
 private:
  void set_has_submap_id();
  void clear_has_submap_id();
  void set_has_submap_2d();
  void clear_has_submap_2d();
  void set_has_submap_3d();
  void clear_has_submap_3d();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cartographer::mapping::proto::SubmapId* submap_id_;
  ::cartographer::mapping::proto::Submap2D* submap_2d_;
  ::cartographer::mapping::proto::Submap3D* submap_3d_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.RangeData) */ {
 public:
  RangeData();
  virtual ~RangeData();

  RangeData(const RangeData& from);

  inline RangeData& operator=(const RangeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeData& default_instance();

  static inline const RangeData* internal_default_instance() {
    return reinterpret_cast<const RangeData*>(
               &_RangeData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RangeData* other);

  // implements Message ----------------------------------------------

  inline RangeData* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeData& from);
  void MergeFrom(const RangeData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.NodeId node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::cartographer::mapping::proto::NodeId& node_id() const;
  ::cartographer::mapping::proto::NodeId* mutable_node_id();
  ::cartographer::mapping::proto::NodeId* release_node_id();
  void set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id);

  // optional .cartographer.sensor.proto.CompressedRangeData range_data = 4;
  bool has_range_data() const;
  void clear_range_data();
  static const int kRangeDataFieldNumber = 4;
  const ::cartographer::sensor::proto::CompressedRangeData& range_data() const;
  ::cartographer::sensor::proto::CompressedRangeData* mutable_range_data();
  ::cartographer::sensor::proto::CompressedRangeData* release_range_data();
  void set_allocated_range_data(::cartographer::sensor::proto::CompressedRangeData* range_data);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.RangeData)
 private:
  void set_has_node_id();
  void clear_has_node_id();
  void set_has_range_data();
  void clear_has_range_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cartographer::mapping::proto::NodeId* node_id_;
  ::cartographer::sensor::proto::CompressedRangeData* range_data_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SerializedData) */ {
 public:
  SerializedData();
  virtual ~SerializedData();

  SerializedData(const SerializedData& from);

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedData& default_instance();

  static inline const SerializedData* internal_default_instance() {
    return reinterpret_cast<const SerializedData*>(
               &_SerializedData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SerializedData* other);

  // implements Message ----------------------------------------------

  inline SerializedData* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedData& from);
  void MergeFrom(const SerializedData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.mapping.proto.Submap submap = 1;
  bool has_submap() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 1;
  const ::cartographer::mapping::proto::Submap& submap() const;
  ::cartographer::mapping::proto::Submap* mutable_submap();
  ::cartographer::mapping::proto::Submap* release_submap();
  void set_allocated_submap(::cartographer::mapping::proto::Submap* submap);

  // optional .cartographer.mapping.proto.RangeData range_data = 2;
  bool has_range_data() const;
  void clear_range_data();
  static const int kRangeDataFieldNumber = 2;
  const ::cartographer::mapping::proto::RangeData& range_data() const;
  ::cartographer::mapping::proto::RangeData* mutable_range_data();
  ::cartographer::mapping::proto::RangeData* release_range_data();
  void set_allocated_range_data(::cartographer::mapping::proto::RangeData* range_data);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SerializedData)
 private:
  void set_has_submap();
  void clear_has_submap();
  void set_has_range_data();
  void clear_has_range_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cartographer::mapping::proto::Submap* submap_;
  ::cartographer::mapping::proto::RangeData* range_data_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Submap

// optional .cartographer.mapping.proto.SubmapId submap_id = 1;
inline bool Submap::has_submap_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Submap::set_has_submap_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Submap::clear_has_submap_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Submap::clear_submap_id() {
  if (submap_id_ != NULL) submap_id_->::cartographer::mapping::proto::SubmapId::Clear();
  clear_has_submap_id();
}
inline const ::cartographer::mapping::proto::SubmapId& Submap::submap_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_ != NULL ? *submap_id_
                         : *::cartographer::mapping::proto::SubmapId::internal_default_instance();
}
inline ::cartographer::mapping::proto::SubmapId* Submap::mutable_submap_id() {
  set_has_submap_id();
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_;
}
inline ::cartographer::mapping::proto::SubmapId* Submap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_id)
  clear_has_submap_id();
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    set_has_submap_id();
  } else {
    clear_has_submap_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}

// optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
inline bool Submap::has_submap_2d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Submap::set_has_submap_2d() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Submap::clear_has_submap_2d() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Submap::clear_submap_2d() {
  if (submap_2d_ != NULL) submap_2d_->::cartographer::mapping::proto::Submap2D::Clear();
  clear_has_submap_2d();
}
inline const ::cartographer::mapping::proto::Submap2D& Submap::submap_2d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_ != NULL ? *submap_2d_
                         : *::cartographer::mapping::proto::Submap2D::internal_default_instance();
}
inline ::cartographer::mapping::proto::Submap2D* Submap::mutable_submap_2d() {
  set_has_submap_2d();
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_;
}
inline ::cartographer::mapping::proto::Submap2D* Submap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_2d)
  clear_has_submap_2d();
  ::cartographer::mapping::proto::Submap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    set_has_submap_2d();
  } else {
    clear_has_submap_2d();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}

// optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
inline bool Submap::has_submap_3d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Submap::set_has_submap_3d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Submap::clear_has_submap_3d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Submap::clear_submap_3d() {
  if (submap_3d_ != NULL) submap_3d_->::cartographer::mapping::proto::Submap3D::Clear();
  clear_has_submap_3d();
}
inline const ::cartographer::mapping::proto::Submap3D& Submap::submap_3d() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_ != NULL ? *submap_3d_
                         : *::cartographer::mapping::proto::Submap3D::internal_default_instance();
}
inline ::cartographer::mapping::proto::Submap3D* Submap::mutable_submap_3d() {
  set_has_submap_3d();
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_;
}
inline ::cartographer::mapping::proto::Submap3D* Submap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_3d)
  clear_has_submap_3d();
  ::cartographer::mapping::proto::Submap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    set_has_submap_3d();
  } else {
    clear_has_submap_3d();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}

// -------------------------------------------------------------------

// RangeData

// optional .cartographer.mapping.proto.NodeId node_id = 1;
inline bool RangeData::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeData::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeData::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeData::clear_node_id() {
  if (node_id_ != NULL) node_id_->::cartographer::mapping::proto::NodeId::Clear();
  clear_has_node_id();
}
inline const ::cartographer::mapping::proto::NodeId& RangeData::node_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.RangeData.node_id)
  return node_id_ != NULL ? *node_id_
                         : *::cartographer::mapping::proto::NodeId::internal_default_instance();
}
inline ::cartographer::mapping::proto::NodeId* RangeData::mutable_node_id() {
  set_has_node_id();
  if (node_id_ == NULL) {
    node_id_ = new ::cartographer::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.RangeData.node_id)
  return node_id_;
}
inline ::cartographer::mapping::proto::NodeId* RangeData::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.RangeData.node_id)
  clear_has_node_id();
  ::cartographer::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
inline void RangeData::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    set_has_node_id();
  } else {
    clear_has_node_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.RangeData.node_id)
}

// optional .cartographer.sensor.proto.CompressedRangeData range_data = 4;
inline bool RangeData::has_range_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeData::set_has_range_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeData::clear_has_range_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeData::clear_range_data() {
  if (range_data_ != NULL) range_data_->::cartographer::sensor::proto::CompressedRangeData::Clear();
  clear_has_range_data();
}
inline const ::cartographer::sensor::proto::CompressedRangeData& RangeData::range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.RangeData.range_data)
  return range_data_ != NULL ? *range_data_
                         : *::cartographer::sensor::proto::CompressedRangeData::internal_default_instance();
}
inline ::cartographer::sensor::proto::CompressedRangeData* RangeData::mutable_range_data() {
  set_has_range_data();
  if (range_data_ == NULL) {
    range_data_ = new ::cartographer::sensor::proto::CompressedRangeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.RangeData.range_data)
  return range_data_;
}
inline ::cartographer::sensor::proto::CompressedRangeData* RangeData::release_range_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.RangeData.range_data)
  clear_has_range_data();
  ::cartographer::sensor::proto::CompressedRangeData* temp = range_data_;
  range_data_ = NULL;
  return temp;
}
inline void RangeData::set_allocated_range_data(::cartographer::sensor::proto::CompressedRangeData* range_data) {
  delete range_data_;
  range_data_ = range_data;
  if (range_data) {
    set_has_range_data();
  } else {
    clear_has_range_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.RangeData.range_data)
}

// -------------------------------------------------------------------

// SerializedData

// optional .cartographer.mapping.proto.Submap submap = 1;
inline bool SerializedData::has_submap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerializedData::set_has_submap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerializedData::clear_has_submap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerializedData::clear_submap() {
  if (submap_ != NULL) submap_->::cartographer::mapping::proto::Submap::Clear();
  clear_has_submap();
}
inline const ::cartographer::mapping::proto::Submap& SerializedData::submap() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.submap)
  return submap_ != NULL ? *submap_
                         : *::cartographer::mapping::proto::Submap::internal_default_instance();
}
inline ::cartographer::mapping::proto::Submap* SerializedData::mutable_submap() {
  set_has_submap();
  if (submap_ == NULL) {
    submap_ = new ::cartographer::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.submap)
  return submap_;
}
inline ::cartographer::mapping::proto::Submap* SerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.submap)
  clear_has_submap();
  ::cartographer::mapping::proto::Submap* temp = submap_;
  submap_ = NULL;
  return temp;
}
inline void SerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  delete submap_;
  submap_ = submap;
  if (submap) {
    set_has_submap();
  } else {
    clear_has_submap();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}

// optional .cartographer.mapping.proto.RangeData range_data = 2;
inline bool SerializedData::has_range_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerializedData::set_has_range_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerializedData::clear_has_range_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerializedData::clear_range_data() {
  if (range_data_ != NULL) range_data_->::cartographer::mapping::proto::RangeData::Clear();
  clear_has_range_data();
}
inline const ::cartographer::mapping::proto::RangeData& SerializedData::range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.range_data)
  return range_data_ != NULL ? *range_data_
                         : *::cartographer::mapping::proto::RangeData::internal_default_instance();
}
inline ::cartographer::mapping::proto::RangeData* SerializedData::mutable_range_data() {
  set_has_range_data();
  if (range_data_ == NULL) {
    range_data_ = new ::cartographer::mapping::proto::RangeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.range_data)
  return range_data_;
}
inline ::cartographer::mapping::proto::RangeData* SerializedData::release_range_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.range_data)
  clear_has_range_data();
  ::cartographer::mapping::proto::RangeData* temp = range_data_;
  range_data_ = NULL;
  return temp;
}
inline void SerializedData::set_allocated_range_data(::cartographer::mapping::proto::RangeData* range_data) {
  delete range_data_;
  range_data_ = range_data;
  if (range_data) {
    set_has_range_data();
  } else {
    clear_has_range_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.range_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED
